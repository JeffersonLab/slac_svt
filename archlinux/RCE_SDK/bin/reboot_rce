#!/bin/bash

declare TARGET=
declare BITLOAD=
declare ALL_ELSE=

usage()
{
    cat <<EOF
        Usage: ${PROGNAME} [<-t <rtems|linux|ramdisk>] [-b <0|1>]

        Modify bootloader parameters and reboot system

EOF
    cat <<EOF | column -s\& -t
        Options: &
        -h|--help & show this output
        -t|--target & Set the target operating system
        -b|--bitload & Set the bitfile load directive
EOF
    exit -1
}

abort() 
{
    echo $*
    exit -1
}

setup()
{
    # first char + ==> Scanning mode = stop after non-option to avoid
    # parsing of extra options for compiler as part of this script's 
    # options
    SHORTOPTS="+hv"
    LONGOPTS="help,target:,bitload:"
    OPTS=$(getopt -s bash --alternative --options $SHORTOPTS \
         --longoptions $LONGOPTS -- $@ )

    eval set -- ${OPTS}

    while true; do
        case "$1" in
            -h|--help)    usage;         shift;;
            --target)     TARGET=$2;     shift 2;;
            --bitload)    BITLOAD=$2;    shift 2;;
            --)                          shift;  break;;
            *)                           shift;  break;;
        esac
    done

    ALL_ELSE=${*}
    
    if [ ! -z $TARGET ];
      then
      if ! [ $TARGET = "rtems" ] && ! [ $TARGET = "linux" ] && ! [ $TARGET = "ramdisk" ]
        then
        echo "Invalid boot target $TARGET"
        usage
      fi
      if [ $TARGET = "ramdisk" ]
        then
        TARGET="rdisk"
      fi
    fi
    
    if [ ! -z $BITLOAD ];
    then
    if ! [ $BITLOAD = "0" ] && ! [ $BITLOAD = "1" ]
        then
        echo "Invalid bitload directive $BITLOAD"
        usage
    fi
    fi
    
    [ ! -z "$TARGET" ] && { $(fw_setenv modeboot sdboot_$TARGET);}
    
    [ ! -z "$BITLOAD" ] && { $(fw_setenv loadbit $BITLOAD); }
    
}

setup "$@"

sync

reboot
